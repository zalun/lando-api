"""save_patches_and_timestamp

Revision ID: b164a1024568
Revises: 5d2d28b723b3
Create Date: 2017-10-05 11:52:53.665046

"""
from alembic import op
from datetime import datetime
import sqlalchemy as sa
from sqlalchemy.sql import text

from landoapi.models.landing import STATUS
from landoapi.phabricator_client import revision_id_to_int

# revision identifiers, used by Alembic.
revision = 'b164a1024568'
down_revision = '5d2d28b723b3'
branch_labels = ()
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Change type of `revision_id` to Integer.
    # Change type of `status` to Enum.
    # There is no full support of ALTER TABLE in SQLite.
    conn = op.get_bind()
    conn.execute(text('ALTER TABLE landings RENAME TO tmp_landings'))
    op.create_table(
        'landings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('request_id', sa.Integer(), nullable=True),
        sa.Column('revision_id', sa.Integer(), nullable=True),
        sa.Column('diff_id', sa.Integer(), nullable=True),
        sa.Column('status', sa.Enum(STATUS), nullable=False),
        sa.Column('error', sa.String(length=128), nullable=True),
        sa.Column('result', sa.String(length=128), nullable=True),
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'), sa.UniqueConstraint('request_id')
    )
    result = conn.execute(
        text(
            'SELECT id, request_id, revision_id, diff_id, status, error, '
            'result FROM tmp_landings'
        )
    )
    for row in result:
        id, request_id, revision_id, diff_id, status, error, result = row
        try:
            status = STATUS(status)
        except ValueError:
            # 'pending' has been renamed to 'created`
            if status == 'pending':
                status = STATUS.LANDING_CREATED
            else:
                raise

        conn.execute(
            text(
                'INSERT INTO landings (id, request_id, revision_id, diff_id, '
                'status, error, result, created, updated) '
                'VALUES ({id}, {request_id}, "{revision_id}", {diff_id}, '
                '"{status}","{error}", "{result}", "{created}", "{updated}")'.
                format(
                    id=id,
                    request_id=request_id,
                    revision_id=revision_id_to_int(revision_id),
                    diff_id=diff_id,
                    status=status.name,
                    error=error,
                    result=result,
                    created=datetime.utcnow(),
                    updated=datetime.utcnow()
                )
            )
        )

    op.drop_table('tmp_landings')

    op.create_table(
        'patches',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('landing_id', sa.Integer(), nullable=True),
        sa.Column('revision_id', sa.Integer(), nullable=True),
        sa.Column('diff_id', sa.Integer(), nullable=True),
        sa.Column('s3_url', sa.String(length=128), nullable=True),
        sa.Column('created', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['landing_id'],
            ['landings.id'],
        ), sa.PrimaryKeyConstraint('id')
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('patches')

    # Change back the type of `revision_id` to String.
    # Change back the type of `status` to String
    conn = op.get_bind()
    conn.execute(text('ALTER TABLE landings RENAME TO tmp_landings'))
    op.create_table(
        'landings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('request_id', sa.Integer(), nullable=True),
        sa.Column('revision_id', sa.String(length=30), nullable=True),
        sa.Column('diff_id', sa.Integer(), nullable=True),
        sa.Column('status', sa.String(length=30), nullable=False),
        sa.Column('error', sa.String(length=128), nullable=True),
        sa.Column('result', sa.String(length=128), nullable=True),
        sa.PrimaryKeyConstraint('id'), sa.UniqueConstraint('request_id')
    )
    result = conn.execute(
        text(
            'SELECT id, request_id, revision_id, diff_id, status, error, '
            'result FROM tmp_landings'
        )
    )
    for row in result:
        id, request_id, revision_id, diff_id, status, error, result = row

        status = STATUS[status].value

        if status == 'created':
            status = 'pending'

        conn.execute(
            text(
                'INSERT INTO landings (id, request_id, revision_id, diff_id, '
                'status, error, result)'
                'VALUES ({id}, {request_id}, "{revision_id}", {diff_id}, '
                '"{status}", "{error}", "{result}")'.format(
                    id=id,
                    request_id=request_id,
                    revision_id='D{}'.format(revision_id),
                    diff_id=diff_id,
                    status=status,
                    error=error,
                    result=result
                )
            )
        )

    op.drop_table('tmp_landings')
    # ### end Alembic commands ###
